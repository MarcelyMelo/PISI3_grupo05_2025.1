import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import seaborn as sns
from math import pi
import numpy as np

st.title("üîç Clusteriza√ß√£o de Estudantes")

st.markdown("""
Essa an√°lise utiliza a t√©cnica de clusteriza√ß√£o para identificar **grupos de estudantes semelhantes** com base em seu comportamento e desempenho. Isso pode auxiliar na personaliza√ß√£o de estrat√©gias educacionais.
""")

# Carregar dados
df = pd.read_csv("./database/personalized_learning_dataset.csv")

# Traduzir valores categ√≥ricos
df['Curso'] = df['Course_Name'].map({
    'Machine Learning': 'Aprendizado de M√°quina',
    'Python Basics': 'Fundamentos de Python',
    'Data Science': 'Ci√™ncia de Dados',
    'CyberSecurity': 'Ciberseguran√ßa',
    'Artificial Intelligence': 'Intelig√™ncia Artificial'
})
df['N√≠vel de Engajamento'] = df['Engagement_Level'].map({
    'Low': 'Baixo',
    'Medium': 'M√©dio',
    'High': 'Alto'
})
df['G√™nero'] = df['Gender'].map({
    'Male': 'Masculino',
    'Female': 'Feminino',
    'Other': 'Outro'
})
df['N√≠vel de Educa√ß√£o'] = df['Education_Level'].map({
    'High School': 'Ensino M√©dio',
    'Undergraduate': 'Gradua√ß√£o',
    'Postgraduate': 'P√≥s-Gradua√ß√£o'
})
df['Estilo de Aprendizagem'] = df['Learning_Style'].map({
    'Visual': 'Visual',
    'Auditory': 'Auditivo',
    'Reading/Writing': 'Leitura/Escrita',
    'Kinesthetic': 'Cinest√©sico'
})



# Renomear colunas para portugu√™s
df.rename(columns={
    'Age': 'Idade',
    'Time_Spent_on_Videos': 'Tempo em V√≠deos (min)',
    'Quiz_Attempts': 'Tentativas de Quiz',
    'Quiz_Scores': 'Nota no Quiz (%)',
    'Forum_Participation': 'Participa√ß√£o no F√≥rum',
    'Assignment_Completion_Rate': 'Conclus√£o de Tarefas (%)',
    'Final_Exam_Score': 'Nota Final (%)',
    'Feedback_Score': 'Nota de Feedback',
    'Dropout_Likelihood': 'Probab de Evas√£o',
}, inplace=True)

# Adicionar ambas as vers√µes da coluna de evas√£o
df['Probabilidade de Evas√£o'] = df['Probab de Evas√£o'].map({'Yes': 1, 'No': 0})  # Para clusteriza√ß√£o
# Selecionar colunas num√©ricas para clusteriza√ß√£o
colunas_cluster = [
    'Tempo em V√≠deos (min)',
    'Tentativas de Quiz',
    'Nota no Quiz (%)',
    'Participa√ß√£o no F√≥rum',
    'Conclus√£o de Tarefas (%)',
    'Nota Final (%)',
    'Nota de Feedback',
    'Probabilidade de Evas√£o',
    'Idade'
]

df_cluster = df[colunas_cluster].dropna()

# Padroniza√ß√£o
scaler = StandardScaler()
dados_padronizados = scaler.fit_transform(df_cluster)

# Sidebar: Par√¢metros
st.sidebar.header("Par√¢metros de Clusteriza√ß√£o")
n_clusters = st.sidebar.slider("N√∫mero de Clusters", 2, 10, 3)

# KMeans
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
clusters = kmeans.fit_predict(dados_padronizados)
df_cluster['Cluster'] = clusters

# PCA para visualiza√ß√£o
pca = PCA(n_components=2)
pca_result = pca.fit_transform(dados_padronizados)
df_cluster['Componente 1'] = pca_result[:, 0]
df_cluster['Componente 2'] = pca_result[:, 1]

# Gr√°fico de dispers√£o dos clusters
st.subheader("Visualiza√ß√£o dos Clusters (PCA)")
fig1, ax1 = plt.subplots()
for c in range(n_clusters):
    grupo = df_cluster[df_cluster['Cluster'] == c]
    ax1.scatter(grupo['Componente 1'], grupo['Componente 2'], label=f'Cluster {c}')
ax1.set_xlabel("Componente 1")
ax1.set_ylabel("Componente 2")
ax1.set_title("Proje√ß√£o PCA dos Clusters")
ax1.legend()
st.pyplot(fig1)

# Tabela com m√©dias por cluster
st.subheader("üìä M√©dias por Cluster")
st.dataframe(df_cluster.groupby("Cluster").mean().round(2))

# Gr√°ficos de barra com m√©dias por cluster
def plot_bar_cluster(coluna, titulo, cor):
    st.subheader(titulo)
    fig, ax = plt.subplots()
    df_cluster.groupby("Cluster")[coluna].mean().plot(kind='bar', color=cor, ax=ax)
    ax.set_ylabel("M√©dia")
    ax.set_xlabel("Cluster")
    ax.set_title(titulo)
    plt.xticks(rotation=0)
    st.pyplot(fig)

plot_bar_cluster('Nota Final (%)', 'üéì Nota M√©dia no Exame Final por Cluster', "#4FC3F7")
plot_bar_cluster('Idade', 'üßç‚Äç‚ôÇÔ∏èIdade M√©dia por Cluster', "#FFB85B")
plot_bar_cluster('Conclus√£o de Tarefas (%)', 'üìà Taxa M√©dia de Conclus√£o de Tarefas por Cluster', "#81C784")
plot_bar_cluster('Participa√ß√£o no F√≥rum', 'üí¨ Participa√ß√£o M√©dia no F√≥rum por Cluster', "#BA68C8")
plot_bar_cluster('Nota no Quiz (%)', 'üìö Nota M√©dia nos Quizzes por Cluster', "#FFD54F")
plot_bar_cluster('Nota de Feedback', '‚≠ê Nota M√©dia de Feedback por Cluster', "#FF8A65")

# Gr√°ficos adicionais de m√©tricas num√©ricas por cluster
plot_bar_cluster('Tempo em V√≠deos (min)', 'üïí Tempo M√©dio em V√≠deos por Cluster', "#90CAF9")
plot_bar_cluster('Tentativas de Quiz', 'üîÅ M√©dia de Tentativas de Quiz por Cluster', "#F48FB1")


# üìâ Gr√°fico: Evas√£o por Cluster
df['Evas√£o'] = df['Probab de Evas√£o'].map({'Yes': 'Sim', 'No': 'N√£o'})  # Para gr√°fico
df_cluster.loc[:, 'Evas√£o'] = df.loc[df_cluster.index, 'Evas√£o']

st.subheader("üìâ Propor√ß√£o de Evas√£o por Cluster")

evasao_cluster = df_cluster.groupby('Cluster')['Evas√£o'].value_counts(normalize=True).unstack().fillna(0) * 100

fig3, ax3 = plt.subplots()
evasao_cluster.plot(kind='bar', stacked=True, ax=ax3, color=["#64b5f6", "#ef5350"])
ax3.set_ylabel("Percentual (%)")
ax3.set_title("Propor√ß√£o de Evas√£o por Cluster")
ax3.legend(title="Probabilidade de Evas√£o")
plt.xticks(rotation=0)
st.pyplot(fig3)

# Gr√°fico de Radar: compara√ß√£o de todas as m√©tricas por cluster
st.subheader("üìå Compara√ß√£o Geral de M√©tricas por Cluster (Radar)")

# Preparar dados
df_radar = df_cluster.groupby("Cluster")[colunas_cluster].mean().reset_index()
df_radar = df_radar.set_index('Cluster')

# Normalizar os dados entre 0 e 1
df_radar_norm = (df_radar - df_radar.min()) / (df_radar.max() - df_radar.min())

# Plot
fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
categorias = df_radar_norm.columns
N = len(categorias)
angles = [n / float(N) * 2 * pi for n in range(N)]
angles += angles[:1]

for i, row in df_radar_norm.iterrows():
    valores = row.tolist()
    valores += valores[:1]  # fechar o gr√°fico
    ax.plot(angles, valores, label=f'Cluster {i}')
    ax.fill(angles, valores, alpha=0.1)

ax.set_xticks(angles[:-1])
ax.set_xticklabels(categorias, fontsize=8)
ax.set_title("Radar de M√©tricas por Cluster", y=1.08)
ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
st.pyplot(fig)

# Heatmap com compara√ß√£o entre clusters
st.subheader("üî• Heatmap de M√©tricas por Cluster")

fig2, ax2 = plt.subplots(figsize=(10, 4))
sns.heatmap(df_radar.T, cmap='Blues', annot=True, fmt=".1f", ax=ax2)
ax2.set_title("M√©dias das M√©tricas por Cluster")
st.pyplot(fig2)
